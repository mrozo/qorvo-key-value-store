/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKNVM_H
#define _MOCKNVM_H

#include "unity.h"
#include "nvm.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mocknvm_Init(void);
void Mocknvm_Destroy(void);
void Mocknvm_Verify(void);




#define nvmInit_ExpectAnyArgsAndReturn(cmock_retval) nvmInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmInit_ExpectAndReturn(nvmInstance, desc, cmock_retval) nvmInit_CMockExpectAndReturn(__LINE__, nvmInstance, desc, cmock_retval)
void nvmInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance** nvmInstance, struct nvmDescription desc, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmInit_CALLBACK)(struct nvmInstance** nvmInstance, struct nvmDescription desc, int cmock_num_calls);
void nvmInit_AddCallback(CMOCK_nvmInit_CALLBACK Callback);
void nvmInit_Stub(CMOCK_nvmInit_CALLBACK Callback);
#define nvmInit_StubWithCallback nvmInit_Stub
#define nvmWirte_ExpectAnyArgsAndReturn(cmock_retval) nvmWirte_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmWirte_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmWirte_ExpectAndReturn(nvmInstance, address, size, data, cmock_retval) nvmWirte_CMockExpectAndReturn(__LINE__, nvmInstance, address, size, data, cmock_retval)
void nvmWirte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance* nvmInstance, size_t address, size_t size, const uint8_t* data, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmWirte_CALLBACK)(struct nvmInstance* nvmInstance, size_t address, size_t size, const uint8_t* data, int cmock_num_calls);
void nvmWirte_AddCallback(CMOCK_nvmWirte_CALLBACK Callback);
void nvmWirte_Stub(CMOCK_nvmWirte_CALLBACK Callback);
#define nvmWirte_StubWithCallback nvmWirte_Stub
#define nvmRead_ExpectAnyArgsAndReturn(cmock_retval) nvmRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmRead_ExpectAndReturn(nvmInstance, address, size, data, cmock_retval) nvmRead_CMockExpectAndReturn(__LINE__, nvmInstance, address, size, data, cmock_retval)
void nvmRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance* nvmInstance, size_t address, size_t size, uint8_t* data, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmRead_CALLBACK)(struct nvmInstance* nvmInstance, size_t address, size_t size, uint8_t* data, int cmock_num_calls);
void nvmRead_AddCallback(CMOCK_nvmRead_CALLBACK Callback);
void nvmRead_Stub(CMOCK_nvmRead_CALLBACK Callback);
#define nvmRead_StubWithCallback nvmRead_Stub
#define nvmErasePages_ExpectAnyArgsAndReturn(cmock_retval) nvmErasePages_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmErasePages_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmErasePages_ExpectAndReturn(nvmInstance, pageNumber, pagesCount, cmock_retval) nvmErasePages_CMockExpectAndReturn(__LINE__, nvmInstance, pageNumber, pagesCount, cmock_retval)
void nvmErasePages_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance* nvmInstance, size_t pageNumber, size_t pagesCount, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmErasePages_CALLBACK)(struct nvmInstance* nvmInstance, size_t pageNumber, size_t pagesCount, int cmock_num_calls);
void nvmErasePages_AddCallback(CMOCK_nvmErasePages_CALLBACK Callback);
void nvmErasePages_Stub(CMOCK_nvmErasePages_CALLBACK Callback);
#define nvmErasePages_StubWithCallback nvmErasePages_Stub
#define nvmDeinit_ExpectAnyArgsAndReturn(cmock_retval) nvmDeinit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmDeinit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmDeinit_ExpectAndReturn(nvmInstance, cmock_retval) nvmDeinit_CMockExpectAndReturn(__LINE__, nvmInstance, cmock_retval)
void nvmDeinit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance** nvmInstance, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmDeinit_CALLBACK)(struct nvmInstance** nvmInstance, int cmock_num_calls);
void nvmDeinit_AddCallback(CMOCK_nvmDeinit_CALLBACK Callback);
void nvmDeinit_Stub(CMOCK_nvmDeinit_CALLBACK Callback);
#define nvmDeinit_StubWithCallback nvmDeinit_Stub
#define nvmEraseAll_ExpectAnyArgsAndReturn(cmock_retval) nvmEraseAll_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmEraseAll_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum nvmStatus cmock_to_return);
#define nvmEraseAll_ExpectAndReturn(nvmInstance, cmock_retval) nvmEraseAll_CMockExpectAndReturn(__LINE__, nvmInstance, cmock_retval)
void nvmEraseAll_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance* nvmInstance, enum nvmStatus cmock_to_return);
typedef enum nvmStatus (* CMOCK_nvmEraseAll_CALLBACK)(struct nvmInstance* nvmInstance, int cmock_num_calls);
void nvmEraseAll_AddCallback(CMOCK_nvmEraseAll_CALLBACK Callback);
void nvmEraseAll_Stub(CMOCK_nvmEraseAll_CALLBACK Callback);
#define nvmEraseAll_StubWithCallback nvmEraseAll_Stub
#define nvmGetInfo_ExpectAnyArgsAndReturn(cmock_retval) nvmGetInfo_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void nvmGetInfo_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmDescription cmock_to_return);
#define nvmGetInfo_ExpectAndReturn(nvmInstance, cmock_retval) nvmGetInfo_CMockExpectAndReturn(__LINE__, nvmInstance, cmock_retval)
void nvmGetInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct nvmInstance* nvmInstance, struct nvmDescription cmock_to_return);
typedef struct nvmDescription (* CMOCK_nvmGetInfo_CALLBACK)(struct nvmInstance* nvmInstance, int cmock_num_calls);
void nvmGetInfo_AddCallback(CMOCK_nvmGetInfo_CALLBACK Callback);
void nvmGetInfo_Stub(CMOCK_nvmGetInfo_CALLBACK Callback);
#define nvmGetInfo_StubWithCallback nvmGetInfo_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
